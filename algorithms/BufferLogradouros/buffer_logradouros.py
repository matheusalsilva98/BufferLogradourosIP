# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GrupoIPExtracaoDeEstradas
                                 A QGIS plugin
 Buffer de Logradouros
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-16
        copyright            : (C) 2023 by Grupo 3
        email                : marcio.souza@ime.eb.br
                               matheus.silva@ime.eb.br
                               romeu.peris@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Grupo IP Extração De Estradas'
__date__ = '2023-03-20'
__copyright__ = '(C) 2023 by Grupo IP Extração De Estradas'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsFields,
                       QgsField,
                       QgsFeature,
                       QgsGeometry,
                       QgsWkbTypes,
                       QgsProcessingParameterNumber,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink)


class BufferLogradouros(QgsProcessingAlgorithm):
    """
    Classe do tipo processing que irá realizar um buffer na camada de entrada do tipo LineString.
    """

    # Declarando os parâmetros que irão ser chamados no algoritmo, como o 'INPUT' o 'OUTPUT' e o
    # 'BUFFER' que irá ser aplicado na camada vetorial.

    OUTPUT = 'OUTPUT'
    BUFFER_RUA = 'BUFFER_RUA'
    BUFFER_TRAVESSA = 'BUFFER_TRAVESSA'
    BUFFER_ESTRADA = 'BUFFER_ESTRADA'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Iniciando o algoritmo
        """

        # Adicionando os parâmetro de entrada que será do tipo linha.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        # Adicionando o parâmetro do buffer para o tipo de logradouro ser rua que irá ser um double para o usuário verificar qual valor
        # mais atende.
        self.addParameter(
            QgsProcessingParameterNumber(
                self.BUFFER_RUA,
                self.tr('Raio do Buffer Rua'),
                type=QgsProcessingParameterNumber.Double
            )
        )

        # Adicionando o parâmetro do buffer para o tipo de logradouro ser travessa que irá ser um double para o usuário verificar
        # qual valor mais atende.
        self.addParameter(
            QgsProcessingParameterNumber(
                self.BUFFER_TRAVESSA,
                self.tr('Raio do Buffer Travessa'),
                type=QgsProcessingParameterNumber.Double
            )
        )

        # Adicionando o parâmetro do buffer para o tipo de logradouro ser estrada que irá ser um double para o usuário verificar
        # qual valor mais atende.
        self.addParameter(
            QgsProcessingParameterNumber(
                self.BUFFER_ESTRADA,
                self.tr('Raio do buffer Estrada'),
                type=QgsProcessingParameterNumber.Double
            )
        )

        # Adicionando o parâmetro de saída, que será a camada que irá ser retornada com o buffer aplicado.
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Onde será processado o algoritmo.
        """

        # Armazenando a entrada na variável source.
        source = self.parameterAsSource(parameters, self.INPUT, context)

        # Adicionando o raio do buffer para a rua que irá ser coletado pelo usuário na variável bufferRua.
        bufferRua = self.parameterAsDouble(parameters, self.BUFFER_RUA, context)

        # Adicionando o raio do buffer para a travessa que irá ser coletado pelo usuário na veriável bufferTravessa.
        bufferTravessa = self.parameterAsDouble(parameters, self.BUFFER_TRAVESSA, context)

        # Adicionando o raio do buffer para a estrada que irá ser coletado pelo usuário na variável bufferEstrada.
        bufferEstrada = self.parameterAsDouble(parameters, self.BUFFER_ESTRADA, context)

        # Declarando a variável que será responsável por criar os atributos, 
        # que tem por objetivo armazenar o tipo de logradouro do tipo string.
        fields = QgsFields()
        fields.append(QgsField("Tipo_Logradouro", QVariant.String))

        # Adicionando a saída na variável sink juntamente com o 'id' correspondente para ser retornado.
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, fields, QgsWkbTypes.Polygon, source.sourceCrs())

        # Declarando a variável total para informar para o usuário o progresso do buffer da camada de entrada.
        total = 100.0 / source.featureCount() if source.featureCount() else 0

        # Colocando na variável features, todas as features que estão na camada de entrada.
        features = source.getFeatures()

        for current, feature in enumerate(features):
            # Caso o usuário deseje cancelar o processo, poderá fazer apenas clicando no botão 'cancel'.
            if feedback.isCanceled():
                break
                
            # Criando a variável que irá ser a feição que poderá ser adicionada ou não na camada de saída, já com o buffer aplicado.
            flagFeature = QgsFeature(fields)
            
            # Armazenando o nome do tipo do logradouro na variável nome.
            nome = feature["TIPO_LOGRA"]

            # Verificando qual o tipo de logradouro e aplicando o buffer correspondente colocado pelo usuário como input.
            if nome == 'R':
                flagFeature.setGeometry(QgsGeometry.fromWkt(feature.geometry().asWkt()).buffer(bufferRua, 4))
                # Adicionando a feature na camada de saída.
                sink.addFeature(flagFeature, QgsFeatureSink.FastInsert)
            elif nome == 'Trv':
                flagFeature.setGeometry(QgsGeometry.fromWkt(feature.geometry().asWkt()).buffer(bufferTravessa, 4))
                # Adicionando a feature na camada de saída.
                sink.addFeature(flagFeature, QgsFeatureSink.FastInsert)
            elif nome == 'Etr':
                flagFeature.setGeometry(QgsGeometry.fromWkt(feature.geometry().asWkt()).buffer(bufferEstrada, 4))
                # Adicionando a feature na camada de saída.
                sink.addFeature(flagFeature, QgsFeatureSink.FastInsert)

            # Retorna pro usuário o feedback do progresso do algoritmo.
            feedback.setProgress(int(current * total))

        
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Retorna o nome do algoritmo.
        """
        return 'Buffer Logradouros'

    def displayName(self):
        """
        Faz a tradução do nome do algoritmo de acordo com o usuário.
        """
        return self.tr(self.name())

    def group(self):
        """
        Retorna o nome do grupo desse algoritmo traduzido.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Retorna o nome do grupo desse algoritmo.
        """
        return 'Buffer Logradouros'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return BufferLogradouros()
